<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>205</x>
      <y>90</y>
      <w>115</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type
--
+ Node() : default constructor
+ Node(Type): constructor
+ getData(): Type
+ setData(Type): void
bg=#1473D4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>210</y>
      <w>240</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--
- next : LinearNode&lt;Type&gt; *
--
+ LinearNode&lt;Type&gt;() : default constructor
+ LinearNode&lt;Type&gt;(Type) : contructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;*) : constructor
+ getNextNode() : LinearNode&lt;Type&gt; *
+ setNextNode(LinearNode&lt;Type&gt; *) : void
bg=#00BCFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>270</x>
      <y>155</y>
      <w>60</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;100.0;60.0;100.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>160</y>
      <w>170</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : [Type]
--
+ Array() : default constructor
+ Array(int): constructor
+ getFromIndex(int): Type
+ setAtIndex(int, Type): void
+ operator [] : Type/Type&amp;
+ operator = : Type&amp;
+ ~Array() : destructor
bg=#F5FF00</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>285</y>
      <w>135</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>230.0;10.0;230.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>345</y>
      <w>150</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*List Structure methods*
/getFromIndex(int) : Type/
/add(Type): void/
/addAtIndex(int, Type) : void/
/remove(int) : Type/
*List Accessors*
/getSize() : int/
/getFront() : LinearNode&lt;Type&gt; */
/getEnd() : LinearNode&lt;Type&gt; */
bg=#6FFCD0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>245</x>
      <y>595</y>
      <w>145</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
+ Queue() : constructor
- ~Queue(): destructor
--
*Queue Methods*
+ enqueue(Type): void
+ dequeue(): Type
+ peek(): Type

*List Structure Methods*
+ getFromIndex(int): Type
+ add(Type): void
+ addAtIndex(int, Type): void
+ remove(int): Type
+ contains(Type): bool

*List Accessors*
+ getSize(): int
+ getFront(): LinearNode&lt;Type&gt; *
+ getEnd(): LinearNode&lt;Type&gt; *
bg=#14C742</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>595</y>
      <w>135</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
+Stack() : constructor
+ ~Stack() : destructor
--

*Stack Methods*
+ push(Type): void
+ pop(): Type
+ peek(): Type

*List Structure Methods*
+ getFromIndex(int): Type
+ add(Type): void
+ addAtIndex(int, Type): void
+ remove(int): Type
+ contains(Type): bool

*List Accessors*
+ getSize(): int
+ getFront(): LinearNode&lt;Type&gt; *
+ getEnd(): LinearNode&lt;Type&gt; *
bg=#42C714</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>440</x>
      <y>525</y>
      <w>100</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>565</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>440</y>
      <w>150</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front: LinearNode&lt;Type&gt; *
- end: LinearNode&lt;Type&gt; *
--
+ LinkedList(): constructor
+ ~LinkedList(): destructor
*List Structure methods*
+ getFromIndex(int) : Type
+ add(Type): void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *
bg=#6FFC86</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>415</x>
      <y>425</y>
      <w>125</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0;110.0;140.0;230.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>565</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;420.0;10.0;420.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>705</y>
      <w>110</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>GraphTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>565</y>
      <w>110</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>LinearTester
--
+ testVsSTL(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>780</x>
      <y>785</y>
      <w>110</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>TreeTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>780</y>
      <w>115</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>780</x>
      <y>705</y>
      <w>115</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>HashTableTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>385</x>
      <y>595</y>
      <w>385</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>750.0;10.0;430.0;10.0;430.0;400.0;90.0;400.0;90.0;80.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>675</x>
      <y>500</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;80.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>575</y>
      <w>145</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;180.0;270.0;180.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>370</x>
      <y>5</y>
      <w>325</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
# next : DoubleNode&lt;Type&gt; *
# previous: DoubleNode&lt;Type&gt; *
--
+ DoubleNode&lt;Type&gt;() : default constructor
+ DoubleNode&lt;Type&gt;(Type) : contructor
+ DoubleNode&lt;Type&gt;(Type, DoubleNode&lt;Type&gt; *, DoubleNode&lt;Type&gt; *) : constructor

+ getNextNode() : DoubleNode&lt;Type&gt; *
+ setNextNode(DoubleNode&lt;Type&gt; *) : void
+ getPreviousNode() : DoubleNode&lt;Type&gt; *
+ setPreviousNode(DoubleNode&lt;Type&gt; *) : void

bg=#F1C236</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>50</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>0</y>
      <w>150</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--
- front: DoubleNode&lt;Type&gt; *
- end: DoubleNode&lt;Type&gt; *
- size: int
--
+ CircularList(): constructor
+ ~CircularList(): destructor
*List Structure methods*
- findNode(int) : DoubleNode&lt;Type&gt; *
+ getFromIndex(int) : Type
+ add(Type): void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type
*List Accessors*
+ getSize() : int
bg=#F98C39</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>50</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>160</y>
      <w>315</w>
      <h>315</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
*- MAXIMUM : int*
- adjacencyMatrix : bool [][]
- weightCostMatrix : int [][]
- graphData : Type[]
- vertexCount : int

--
Graph() : Constructor

+ addVertex(const Type&amp; value): void

*Connect Vertices*
+ addEdge(int source, int target): void
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target, int cost) : void

*Disconnect Vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessor*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int verteex) : Type const
+ size() const : int

*Check Connnections*
+ hasUndirectedConnection(int sourc, int target) : const bool
+ areConnected(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversal*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool[] markedVertices) : void

bg=#BA39F9</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
