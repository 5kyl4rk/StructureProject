<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>208</x>
      <y>96</y>
      <w>92</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type
--
+ Node() : default constructor
+ Node(Type): constructor
+ getData(): Type
+ setData(Type): void
bg=#1473D4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>260</x>
      <y>192</y>
      <w>192</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--
- next : LinearNode&lt;Type&gt; *
--
+ LinearNode&lt;Type&gt;() : default constructor
+ LinearNode&lt;Type&gt;(Type) : contructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;*) : constructor
+ getNextNode() : LinearNode&lt;Type&gt; *
+ setNextNode(LinearNode&lt;Type&gt; *) : void
bg=#00BCFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>148</y>
      <w>48</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;100.0;60.0;100.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>44</x>
      <y>152</y>
      <w>136</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : [Type]
--
+ Array() : default constructor
+ Array(int): constructor
+ getFromIndex(int): Type
+ setAtIndex(int, Type): void
+ operator [] : Type/Type&amp;
+ operator = : Type&amp;
+ ~Array() : destructor
bg=#F5FF00</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>252</y>
      <w>108</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>230.0;10.0;230.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>260</x>
      <y>300</y>
      <w>120</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*List Structure methods*
/getFromIndex(int) : Type/
/add(Type): void/
/addAtIndex(int, Type) : void/
/remove(int) : Type/
*List Accessors*
/getSize() : int/
/getFront() : LinearNode&lt;Type&gt; */
/getEnd() : LinearNode&lt;Type&gt; */
bg=#6FFCD0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>240</x>
      <y>500</y>
      <w>116</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
+ Queue() : constructor
- ~Queue(): destructor
--
*Queue Methods*
+ enqueue(Type): void
+ dequeue(): Type
+ peek(): Type

*List Structure Methods*
+ getFromIndex(int): Type
+ add(Type): void
+ addAtIndex(int, Type): void
+ remove(int): Type
+ contains(Type): bool

*List Accessors*
+ getSize(): int
+ getFront(): LinearNode&lt;Type&gt; *
+ getEnd(): LinearNode&lt;Type&gt; *
bg=#14C742</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>404</x>
      <y>500</y>
      <w>108</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
+Stack() : constructor
+ ~Stack() : destructor
--

*Stack Methods*
+ push(Type): void
+ pop(): Type
+ peek(): Type

*List Structure Methods*
+ getFromIndex(int): Type
+ add(Type): void
+ addAtIndex(int, Type): void
+ remove(int): Type
+ contains(Type): bool

*List Accessors*
+ getSize(): int
+ getFront(): LinearNode&lt;Type&gt; *
+ getEnd(): LinearNode&lt;Type&gt; *
bg=#42C714</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>396</x>
      <y>444</y>
      <w>80</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>292</x>
      <y>476</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>468</x>
      <y>376</y>
      <w>120</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front: LinearNode&lt;Type&gt; *
- end: LinearNode&lt;Type&gt; *
--
+ LinkedList(): constructor
+ ~LinkedList(): destructor
*List Structure methods*
+ getFromIndex(int) : Type
+ add(Type): void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *
bg=#6FFC86</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>376</x>
      <y>364</y>
      <w>100</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0;110.0;140.0;230.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>292</x>
      <y>476</y>
      <w>176</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;420.0;10.0;420.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>556</x>
      <y>588</y>
      <w>88</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>GraphTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>652</x>
      <y>476</y>
      <w>88</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>LinearTester
--
+ testVsSTL(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>668</x>
      <y>652</y>
      <w>88</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>TreeTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>556</x>
      <y>648</y>
      <w>92</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>668</x>
      <y>588</y>
      <w>92</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>HashTableTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>352</x>
      <y>500</y>
      <w>308</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>750.0;10.0;430.0;10.0;430.0;400.0;90.0;400.0;90.0;80.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>584</x>
      <y>424</y>
      <w>40</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;80.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>508</x>
      <y>484</y>
      <w>116</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;180.0;270.0;180.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>28</y>
      <w>260</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
# next : DoubleNode&lt;Type&gt; *
# previous: DoubleNode&lt;Type&gt; *
--
+ DoubleNode&lt;Type&gt;() : default constructor
+ DoubleNode&lt;Type&gt;(Type) : contructor
+ DoubleNode&lt;Type&gt;(Type, DoubleNode&lt;Type&gt; *, DoubleNode&lt;Type&gt; *) : constructor

+ getNextNode() : DoubleNode&lt;Type&gt; *
+ setNextNode(DoubleNode&lt;Type&gt; *) : void
+ getPreviousNode() : DoubleNode&lt;Type&gt; *
+ setPreviousNode(DoubleNode&lt;Type&gt; *) : void

bg=#F1C236</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>252</x>
      <y>64</y>
      <w>96</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>644</x>
      <y>24</y>
      <w>120</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--
- front: DoubleNode&lt;Type&gt; *
- end: DoubleNode&lt;Type&gt; *
- size: int
--
+ CircularList(): constructor
+ ~CircularList(): destructor
*List Structure methods*
- findNode(int) : DoubleNode&lt;Type&gt; *
+ getFromIndex(int) : Type
+ add(Type): void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type
*List Accessors*
+ getSize() : int
bg=#F98C39</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>596</x>
      <y>64</y>
      <w>56</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
</diagram>
